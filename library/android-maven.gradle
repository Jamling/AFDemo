//repositories {
//    jcenter()
//    maven {
//        url "${android.sdkDirectory}/extras/android/m2repository"
//    }
//}

project.ext {
    name = project.property('ART_ARTIFACT')
    group = project.property('ART_GROUP')
    version = project.property('ART_VER')
    artifactId = project.property('ART_ARTIFACT')
    archivesBaseName = project.property('ART_ARTIFACT')
}

tasks.withType(Jar) {
    baseName project.property('ART_ARTIFACT')
    manifest {
        attributes 'Author': DEV_NAME,
                'Email': DEV_EMAIL,
                'Version': ART_VER,
                'Build-Date': new Date().dateString
    }
}
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

android.libraryVariants.all { variant ->
    // println variant.javaCompile.classpath.files
    if(variant.name == 'release') {
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            failOnError false
            title "${PRJ_NAME}  ${ART_VER}  API"
            // description = ''
            source = variant.javaCompile.source
            classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath(), project.file
                    ("gen"))
            options {
                links "http://docs.oracle.com/javase/7/docs/api/"
                linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
                encoding 'utf-8'
                charSet 'utf-8'
                tags 'date:t:Date:'
                tags 'sample:t:Sample:'
                tags 'attr:a:Attribute:'
            }
            exclude 'android/**/*'
            exclude 'com/**/*'
            exclude '**/*'
        }
        task("javadocJar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
            classifier = 'javadoc'
            from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
        }
        artifacts {
            archives tasks.getByName("javadocJar")
        }
    }
}
artifacts {
    // archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}

install {
    println(artifactId)
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                // artifactId project.property('ART_ARTIFACT')
                packaging ART_PKG
                // Add your description here
                name project.property('PRJ_NAME')
                url project.property('PRJ_URL')
                description project.property('PRJ_DESC')
                // Set your license
                licenses {
                    license {
                        name project.property('LIC_NAME')
                        url project.property('LIC_URL')
                    }
                }
                developers {
                    developer {
                        id project.property('DEV_ID')
                        name project.property('DEV_NAME')
                        email project.property('DEV_EMAIL')
                    }
                }
                scm {
                    connection project.property('SCM_REPO')
                    developerConnection project.property('SCM_REPO')
                    url project.property('SCM_URL')
                }
            }
        }
    }
//    repositories.mavenDeployer() {
//        repository(url: ART_LOCAL_URL)
//        pom.groupId = ART_GROUP
//        pom.artifactId = ART_ARTIFACT
//        pom.version = ART_VER
//    }
}
